import random
from math import *

daily_return_mean = 0.0005
daily_return_sigma = 0.04 

jump_xm = -0.33
jump_alpha = 1.5
jump_lambda = 10* 250 # 250 working days per year.

class bank():
   T = 0.0     # if T > 1, jump happens.
   def pareto(self,xm,pareto_a):    #define a pareto PRNG
      u = random.random()
      return xm*(1-u)**(-1.0/pareto_a)      

   def daily_return(self,N):  # daily total return for N traders
       # N is the number of traders, the method computes daily total return for N traders
       total_log_return =0.0   ######daily log return
       jump_loss = 0.0    ###### how much you will loss if jumps!
       operating_gain =0.0     #######how much you will gain daily without jump
       if self.T>1:   #####jump!
           for i in range(1,N):
               jump_loss += self.pareto(jump_xm , jump_alpha)
           total_log_return += jump_loss
           self.T = 0.0  ####### count when is the next jump
       else:
           self.T += random.expovariate(jump_lambda)
           for i in range(N):           ######how many traders you have?
               operating_gain+= random.gauss(daily_return_mean,daily_return_sigma) # how much N traders will gain in a day
       total_log_return += operating_gain + jump_loss
       return total_log_return

   def simulate_a_year(self,number_of_traders):        ####simulate daily_return for 250 times and get the sum, say a year! 
        #input how many traders you want to simulate to number_of_traders
        total_sum = 0.0
        self.T=.0
        for i in range(250):  # 250 is a year
            total_sum += self.daily_return(number_of_traders)
        return total_sum/number_of_traders   ####return the average annual return for each of the N traders
                          
        # for our purpose of computing arithmatic, I am defining that initial price is 1 dollar, the result is how many times of the initial investment

   def simulate_many(self,times,number_of_traders, A):     ##### A is total investment
    ######this method simulate many consecutive years of log return and arithmatic return, it`s consecutive years, not many times of next one year!!
        for i in range(times):
           total =.0
           total += self.simulate_a_year(number_of_traders)
        return total/(times)
        #return "average log return for each trader is",total/times     #"average log return for each trader is", total/times 
        #print "average arithmatic for each trader return is", exp(total/times)-1   #   "arithmetic return is %f "  %( exp(total/times))
        #print "manager bonus is", max((A*exp(total/times)),0)

   def A_sensitivity(self,A):
           self.simulate_many(5000, 10, A)

   
           
           
            
        
            


   
