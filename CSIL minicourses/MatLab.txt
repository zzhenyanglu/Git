MATLAB

R Yang

J Chee

John Lekberg

2015-10-14

Welcome to MATLAB! This will be a minicourse directed toward getting you familiar with the basics of working with MATLAB. The target audience for this program will be people who have no programming background - if you have programmed before, you might find some of what we cover tedious.
Interface

We will begin with MATLAB's graphical user interface.
Most of your work for now will be done in MATLAB's COMMAND WINDOW. Here, you can give commands to MATLAB and the results of your computations will be displayed.
You can also open the EDITOR by going to File -> New -> Blank M-File. We will return to this element of the interface later in this session.
There is also a WORKSPACE which lists what variables and pieces of data you have loaded into MATLAB, a COMMAND HISTORY which lists previous commands that you have entered, and a CURRENT FOLDER which details the current directory you are working with (this is important when you are importing and exporting datasets).
Language Basics

Try entering the following in your Command Window and pressing Enter:
>> 5
ans =
    5
>> 5;
Whenever we enter something at the command prompt, MATLAB takes the expression that we entered, evaluates the value of the expression, and prints that value back at us. Not that when we put a semicolon (;) at the end of the line, there is no output -- it is suppressed. For a slightly more complex example, try:
>> 5 + 5
ans =
    10
Like your calculator, MATLAB can do arithmetic! Your usual +, -, *, / operations work here, along with parentheses for order of operations (although they have special meanings in certain contexts as we will see later on).
Most of the time, you won't be working with literal values, but instead variables which hold values. In the following example, we assign the value of 5 to the variable x using the equal sign.
>> x = 5
x =
    5
>> x
x =
    5
If we do arithmetic with x, MATLAB will evaluate the expression with the value 5 for x.
>> x + 1
ans =
    6
Matrices

MATLAB's speciality is working with arrays and matrices.
We declare matrices using square brackets [ ], separating the elements of each column with commas and the elements of each row with semicolons.
>> [1,2,3]
ans =
    1    2    3
>> [1;2;3]
ans =
    1
    2
    3
>> [1,2;3,4]
ans =
    1    2
    3    4
Matrices are assigned to variables the same way that normal values are.
>> a = [1,2;3,4]
a  =
   1    2
   3    4
>> b = [1,2]
b  =
   1    2
We reference individual elements of an array using parentheses. If the matrix is one-dimensional, we simply write:
>> b(1)
ans =
    1
>> b(2)
ans =
    2
If the matrix is two-dimensional, we write matrixname(r,c) where r is the row and c is the column of the element that we want.
>> a(1,1)
ans =
    1
>> a(1,2)
ans =
    2
>> a(2,1)
ans =
    3
If you come from another programming language, note that MATLAB starts counting places in a matrix from 1, not 0 which is what you might be used to.
We can generate ranges of numbers using colons; this is useful for both generating matrices and retrieving elements of matrices. We use the format initial:end, which generates one-by-one the numbers between initial and end, inclusive. We can also use initial:increment:end to step by increment rather than by ones.
>> c = 1:5
c =
  1     2       3       4       5
>> c = 1:2:10
c =
  1     3       5       7       9
>> c(1:3)
ans =
    1    3    5
>> c(2:4)
ans =
    3    5    7
Using the colon alone means 'everything'. This way, you can retrieve an entire column or an entire row.
>> a(:,1)
ans =
    1
    3
>> a(1,:)
ans =
    1   2
We can also use a method called logical indexing to access items in a matrix.
>> m = [1 2 3 ; 4 5 6]
m =
    1   2   3
    4   5   6
>> m(:, [false false true])
ans =
    3
    6
The colon indicates that we are selecting all rows, and the the second vector matrix indicates that we are selecting the last column only.
We can do matrix arithmetic on these matrices. If you use an operation between a matrix and a singular value, MATLAB will apply that operation and value to each element of the matrix. If you use the operation between two matrices, though, MATLAB will perform the matrix operation (e.g. matrix multiplication).
>> a + 1
ans =
    2   3
    4   5
>> a * 5
ans =
    5   10
    15  20
>> a + a
ans =
    2   4
    6   8
>> a * a
ans =
    7   10
    15  22
>> a * b
ans =
    5
    11
If you want to perform the operation between the elements of two matrices ('element-wise'), then you must denote this with a period before the operation.
>> b .* b
ans =
    1
    4
>> b * b
??? Error using ==> mtimes
Inner matrix dimensions must agree.
Here are some other common functions to use with matrices.
Transpose
>> a'
ans =
    1   3
    2   4
Diagonal (both access and generation)
>> diag(a)
ans =
    1
    4
>> diag(diag(a))
ans =
    1   0
    0   4
Sum (first across rows, then across columns - you can specify which dimension)
>> sum(a)
ans =
    4   6
>> sum(a,2)
ans =
    3
    7
>> sum(sum(a))
ans =
    10
Zero - generate an nxn or nxm matrix of zeros
>> zeros(2)
ans =
    0   0
    0   0
>> zeros(1,2)
ans =
    0   0
Ones - generate an nxn or nxm matrix of ones
>> ones(2)
ans =
    1   1
    1   1
>> ones(2,1)
ans =
    1
    1
Identity
>> eye(2)
ans =
    1   0
    0   1
Random (random numbers between 0 and 1)
>> rand(2)
ans =
    0.8947      0.1270
    0.9058      0.9243
Conditionals and Loops

We can use conditional statements and loops to control how MATLAB executes segments of code - this comes in importantly when we are writing code rather than simply interacting with the MATLAB Command Window.
The building block of these controls are Boolean statements - 1 or 0, i.e. True or False. These values come from expressions like the following:
a == b tests if a and b are equal
>> 1 == 1
ans =
    1
a ~= b tests if a and b are nonequal (not != as you might see in other languages)
>> 1 ~= 1
ans =
    0
Similarly, we have <, <=, >, >=. These statements can all be composed with && for logical AND and || or logical OR.
>> (5 > 3) && (5 < 7)
ans =
    1

>> (3 >= 5) || (10 ~= 11)
ans =
    1
If we apply these operations to a matrix, it is applied to each element of that matrix.
>> a < 2
ans =
    1   0
    0   0
If (Else) Statements
These statements boil down to saying "If X is true, do A" or "If X is true, do A, or else do B".
if (boolean value)
   do something
end
So we can write:
>> if 5 > 2
n = 5
end

n =
  5

>> if 2 > 5
n = 0
end
>>
Notice how the first section executed, but the second section did not.
>> if 2 > 5
n = 0
else
n = 1
end

n =
  1
In the above example, first MATLAB checked if 2 > 5. This was false, so it executed the part after else rather than the part after if.
In fact, we can nest these if-else statements.
>> if n == 0
n = 1
else if n == 1
n = 0
else
n = 5
end
For Loops
For Loops allow you to repeat a segment of code a set number of times. They follow the following structure:
for loopvariable = array
    action
end
For each element in the array, MATLAB performs the action one time. During the iteration that corresponds with the ith element of the array, loopvariable is set to equal the value of the ith element of the array. This is best demonstrated with an example.
We could calculate the factorial of 5 by doing the following:
>> fact = 1;
>> fact = fact * 2;
>> fact = fact * 3;
>> fact = fact * 4;
>> fact = fact * 5
ans =
    120
or the more verbose:
>> fact = 1;
>> i = 2;
>> fact = fact * i;
>> i = 3;
>> fact = fact * i;
>> i = 4;
>> fact = fact * i;
>> i = 5;
>> fact = fact * i
ans =
    120
This is equivalent to the following for loop:
>> fact = 1;
>> for i = [2:5]
fact = fact * i
end

fact =
     2
fact =
     6
fact =
    24
fact =
   120
Exercise

As a test of the previous core concepts, write a script or function that computes all the prime numbers between 1 and 100.
We can break this problem down into two main components: * Test if a function is prime * Test all numbers between 1 and 100
Note: You may find the function mod useful, e.g. mod(6,3) = 0, mod(6,5) = 1.